openapi: 3.0.0
info:
  title: Actual Server
  version: 1.0.2
  description: "Actual Budget sync server."
servers:
  - url: http://localhost:5006
    description: Local development
tags:
  - name: health-check
    description: health check endpoints
  - name: account
    description: account
paths:
  "/info":
    get:
      summary: Displays application information.
      tags:
        - health-check
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
              examples:
                success:
                  $ref: "#/components/examples/info"
  "/health":
    get:
      summary: Shows application health information.
      tags:
        - health-check
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
              examples:
                success:
                  $ref: "#/components/examples/health"
  "/metrics":
    get:
      summary: Shows metrics information for the current application.
      tags:
        - health-check
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metrics"
              examples:
                success:
                  $ref: "#/components/examples/metrics"
  "/mode":
    get:
      summary: Shows the mode set in the current server configuration.
      tags:
        - health-check
      responses:
        "200":
          description: Ok
          content:
            text/html:
              schema:
                type: string
  "/account/needs-bootstrap":
    get:
      summary: returns bootstrap status
      tags:
        - account
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      bootstrapped:
                        type: boolean
              examples:
                success:
                  value: { status: "ok", data: { bootstrapped: true } }
        "500":
          $ref: "#/components/responses/error-internal"
  "/account/bootstrap":
    post:
      summary: bootstrap the server
      tags:
        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
              examples:
                success:
                  $ref: "#/components/examples/token"
        "400":
          description: error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  reason:
                    type: string
              examples:
                already-bootstrapped:
                  value: { status: "error", reason: "already-bootstrapped" }
                invalid-password:
                  value: { status: "error", reason: "invalid-password" }
        "500":
          $ref: "#/components/responses/error-internal"
  "/account/login":
    post:
      summary: Logs in to the server
      tags:
        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        nullable: true
              examples:
                success:
                  $ref: "#/components/examples/token"
                failure:
                  value: { status: "ok", data: { token: null } }
        "500":
          $ref: "#/components/responses/error-internal"
  "/account/change-password":
    post:
      summary: Update a user password
      tags:
        - account
      parameters:
        - $ref: "#/components/parameters/token-header"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Login"
                - type: object
                  properties:
                    token:
                      type: string
                      nullable: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
              examples:
                success:
                  value: { status: "ok", data: {} }
        "401":
          $ref: "#/components/responses/unauth-user"
        "500":
          $ref: "#/components/responses/error-internal"
  "/account/validate":
    get:
      summary: Validate account access
      tags:
        - account
      parameters:
        - $ref: "#/components/parameters/token-header"
      requestBody:
        # required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  nullable: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      validated:
                        type: boolean
              examples:
                success:
                  value: { status: "ok", data: { validated: true } }
        "401":
          $ref: "#/components/responses/unauth-user"
        "500":
          $ref: "#/components/responses/error-internal"
components:
  schemas:
    Info:
      type: object
      properties:
        build:
          type: object
          properties:
            description:
              type: string
            name:
              type: string
            version:
              type: string
    Health:
      type: object
      properties:
        status:
          type: string
    Metrics:
      type: object
      properties:
        mem:
          type: object
          properties:
            heapTotal:
              type: number
            heapUsed:
              type: number
            rss:
              type: number
            external:
              type: number
            arrayBuffers:
              type: number
        uptime:
          type: number
    Login:
      type: object
      properties:
        password:
          type: string
      required:
        - password
  examples:
    info:
      value:
        {
          "build":
            {
              "description": "This is my new app",
              "name": "MyApp",
              "version": "1.0.0"
            },
          "git":
            {
              "branch": "master",
              "commit": { "id": "329a314", "time": "2016-11-18 08:16:39-0500" }
            }
        }
    health:
      value: { "status": "UP" }
    metrics:
      value:
        {
          "mem":
            { "heapTotal": 14659584, "heapUsed": 10615072, "rss": 30093312 },
          "uptime": 19.797
        }
    token:
      value: { status: "ok", data: { token: "token" } }
  parameters:
    token-header:
      name: x-actual-token
      in: header
      required: false
      description: Session token, if not provided in the request body.
      schema:
        type: string
  responses:
    unauth-user:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              reason:
                type: string
              details:
                type: string
          examples:
            unauth:
              value:
                {
                  status: "error",
                  reason: "unauthorized",
                  details: "token-not-found"
                }
    error-internal:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              reason:
                type: string
          examples:
            err:
              value: { status: "error", reason: "internal-error" }
